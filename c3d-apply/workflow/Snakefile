#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids

import os
from os.path import join
import pandas as pd

configfile: 'config/snakebids.yml'

df_test=pd.read_table(join(workflow.basedir, config['test_subs']), sep='\t',header=0, dtype=str)
if df_test[df_test['dataset']==os.path.basename(str(config["bids_dir"]))].shape[0]>0:
    config["participant_label"]=df_test[df_test['dataset']==os.path.basename(str(config["bids_dir"]))]['participant'].to_list()


#writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config["derivatives"],
        participant_label=config["participant_label"],
        exclude_participant_label=config["exclude_participant_label"]
    )
)



#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(\
    config["pybids_inputs"]\
)

#---- end snakebids boilerplate ------------------------------------------------

rule all:
    input:
        expand(
            expand(
                bids(
                    root=join(config["output_dir"], "c3d_rf-apply"),
                    space=config["space"],
                    suffix="probs.nii.gz",
                    desc="afid{afid_num}",
                    **config["subj_wildcards"],
                ),
                afid_num=range(1, 33),
                allow_missing=True,
            ),
            zip,
            **config["input_zip_lists"]["t1w"],
        ),
        bids(
            root=join(config["output_dir"], "reg_aladin"),
            session='test',
            from_='subject',
            to=config["space"],
            desc='rigid',
            suffix="regqc.html",
        ),
        expand(
            bids(
                root=join(config["output_dir"], "threshold_prob"),
                datatype="anat",
                res="1mm",
                suffix="probs.nii.gz",
                space=config["space"],
                **config["subj_wildcards"],
            ),
            zip,
            **config["input_zip_lists"]["t1w"],
        ),

rule align_template_rigid:
    input:
        image=config["input_path"]["t1w"],
    output:
        warped=bids(
            root=join(config["output_dir"], "reg_aladin"),
            datatype="anat",
            res="1mm",
            suffix="T1w.nii.gz",
            space=config["space"],
            **config["subj_wildcards"],
        ),
        xfm_ras=bids(
            root=join(config["output_dir"], "reg_aladin"),
            datatype="anat",
            suffix="xfm.txt",
            space=config["space"],
            **config["subj_wildcards"],
        ),
    params:
        fixed = join(workflow.basedir, config['template']),
    container: config["singularity"]["neuroglia"]
    shell:
        "reg_aladin -flo {input.image} -ref {params.fixed} -res {output.warped} -rigOnly -interp 0 -aff {output.xfm_ras}"

################### ADDED CODE ############################
### Gradients
rule gen_grad_template:
    input:
        image=rules.align_template_rigid.output.warped,
    output:
        gradx=expand(
                bids(
                root=join(config["output_dir"], "c3d_grad"),
                datatype="anat",
                res="1mm",
                desc="grad{grad_dir}",
                suffix="T1w.nii.gz",
                space=config["space"],
                **config["subj_wildcards"],
            ),
            grad_dir=['x'],
            allow_missing=True,
        ),
        grady=expand(
                bids(
                root=join(config["output_dir"], "c3d_grad"),
                datatype="anat",
                res="1mm",
                desc="grad{grad_dir}",
                suffix="T1w.nii.gz",
                space=config["space"],
                **config["subj_wildcards"],
            ),
            grad_dir=['y'],
            allow_missing=True,
        ),
        gradz=expand(
                bids(
                root=join(config["output_dir"], "c3d_grad"),
                datatype="anat",
                res="1mm",
                desc="grad{grad_dir}",
                suffix="T1w.nii.gz",
                space=config["space"],
                **config["subj_wildcards"],
            ),
            grad_dir=['z'],
            allow_missing=True,
        ),
    container: config["singularity"]["neuroglia"]
    shell:
        "c3d -verbose {input.image} -smooth 1x1x1vox -grad -oo {output.gradx} {output.grady} {output.gradz}"

##################### END OF ADDED CODE #####################

rule reg_qc:
    input:
        images_ct=expand(
            rules.align_template_rigid.output.warped,
            zip,
            **config["input_zip_lists"]["t1w"],
        ),
    output:
        html_fig=bids(
            root=join(config["output_dir"], "reg_aladin"),
            session='test',
            from_='subject',
            to=config["space"],
            desc='rigid',
            suffix="regqc.html",
        ),
    script:
        './scripts/reg_qc.py'


rule apply_model:
    input:
        image=rules.align_template_rigid.output.warped,
        gradx=rules.gen_grad_template.output.gradx,
        grady=rules.gen_grad_template.output.grady,
        gradz=rules.gen_grad_template.output.gradz,
        model=bids(
            root=join(config["model_dir"], "auto-afids-train"),
            suffix="model.rf",
            space=config["space"],
        )
    output:
        prob_map=expand(
                bids(
                    root=join(config["output_dir"], "c3d_rf-apply"),
                    space=config["space"],
                    suffix="probs.nii.gz",
                    desc="afid{afid_num}",
                    **config["subj_wildcards"],
                ),
            afid_num=range(1, 33),
            allow_missing=True,
        )
    container: config["singularity"]["neuroglia"]
    shell:
        'c4d -verbose {input.image} {input.gradx} {input.grady} {input.gradz} -rf-apply {input.model} -oo {output.prob_map}'

rule threshold_prob:
    input:
        warped_img=rules.align_template_rigid.output.warped,
        prob_map=expand(
                bids(
                    root=join(config["output_dir"], "c3d_rf-apply"),
                    space=config["space"],
                    suffix="probs.nii.gz",
                    desc="afid{afid_num}",
                    **config["subj_wildcards"],
                ),
            afid_num=range(1, 33),
            allow_missing=True,
        ),
    output:
        prob_combined=bids(
            root=join(config["output_dir"], "threshold_prob"),
            datatype="anat",
            res="1mm",
            suffix="probs.nii.gz",
            space=config["space"],
            **config["subj_wildcards"],
        ),
    script:
        './scripts/prob_thres.py'
