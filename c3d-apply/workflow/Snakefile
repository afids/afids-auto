#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids

import os
from os.path import join

configfile: 'config/snakebids.yml'

#writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config["derivatives"],
        participant_label=config["participant_label"],
        exclude_participant_label=config["exclude_participant_label"]
    )
)



#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(\
    config["pybids_inputs"]\
)

#---- end snakebids boilerplate ------------------------------------------------

rule all:
    input:
        expand(
            expand(
                bids(
                    root=join(config["output_dir"], "c3d_rf-apply"),
                    space=config["space"],
                    suffix="probs.nii.gz",
                    desc="afid{afid_num}",
                    **config["subj_wildcards"],
                ),
                afid_num=range(1, 33),
                allow_missing=True,
            ),
            zip,
            **config["input_zip_lists"]["t1w"],
        ),


rule align_template_rigid:
    input:
        image=config["input_path"]["t1w"],
    output:
        warped=bids(
            root=join(config["output_dir"], "reg_aladin"),
            datatype="anat",
            suffix="T1w.nii.gz",
            space=config["space"],
            **config["subj_wildcards"],
        ),
        xfm_ras=bids(
            root=join(config["output_dir"], "reg_aladin"),
            datatype="anat",
            suffix="xfm.txt",
            space=config["space"],
            **config["subj_wildcards"],
        ), 
    params:
        fixed = join(workflow.basedir, config['template']),
    container: config["singularity"]["neuroglia"]
    shell:
        "reg_aladin -flo {input.image} -ref {params.fixed} -res {output.warped} -rigOnly -interp 0 -aff {output.xfm_ras}"


rule apply_model:
    input:
        image=rules.align_template_rigid.output.warped,
        model=bids(
            root=join(config["model_dir"], "auto-afids-train"),
            datatype="anat",
            suffix="model.rf",
            space=config["space"],
        )
    output:
        prob_map=expand(
            bids(
                root=join(config["output_dir"], "c3d_rf-apply"),
                space=config["space"],
                suffix="probs.nii.gz",
                desc="afid{afid_num}",
                **config["subj_wildcards"],
            ),
            afid_num=range(1, 33),
            allow_missing=True,
        )
    container: config["singularity"]["neuroglia"]
    shell:
        'c4d -verbose {input.image} -rf-apply {input.model} -oo {output.prob_map}'
