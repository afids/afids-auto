#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids

import os
from os.path import join

configfile: 'config/snakebids.yml'

#writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config["derivatives"],
        participant_label=config["participant_label"],
        exclude_participant_label=config["exclude_participant_label"]
    )
)



#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(\
    config["pybids_inputs"]\
)

#---- end snakebids boilerplate ------------------------------------------------

rule all:
    input:
        bids(
            root=join(config["output_dir"], "auto-afids-train"),
            datatype="anat",
            suffix="model.rf",
            space=config["space"],
        ),


rule align_template_rigid:
    input:
        image=config["input_path"]["t1w"],
    output:
        warped=bids(
            root=join(config["output_dir"], "reg_aladin"),
            datatype="anat",
            res="1mm",
            suffix="T1w.nii.gz",
            space=config["space"],
            **config["subj_wildcards"],
        ),
        xfm_ras=bids(
            root=join(config["output_dir"], "reg_aladin"),
            datatype="anat",
            suffix="xfm.txt",
            space=config["space"],
            **config["subj_wildcards"],
        ), 
    params:
        fixed = join(workflow.basedir, config['template']),
    container: config["singularity"]["neuroglia"]
    shell:
        "reg_aladin -flo {input.image} -ref {params.fixed} -res {output.warped} -rigOnly -interp 0 -aff {output.xfm_ras}"

################### ADDED CODE ############################
### Gradients
rule gen_grad_template:
    input:
        image=rules.align_template_rigid.output.warped,
    output:
        grad=bids(
            root=join(config["output_dir"], "c3d_grad"),
            datatype="anat",
            res="1mm",
            desc="gradalldirs",
            suffix="T1w.nii.gz",
            space=config["space"],
            **config["subj_wildcards"],
        ),
    container: config["singularity"]["neuroglia"]
    shell:
        "c3d -verbose {input.image} -grad -omc {output.grad}"

##################### END OF ADDED CODE #####################

rule fid_tform_mni_rigid:
    input:
        xfm_new=rules.align_template_rigid.output.xfm_ras,
        groundtruth=bids(
            root=join(config["bids_dir"], 'derivatives', 'afids_groundtruth'),
            space="T1w",
            desc="groundtruth",
            suffix="afids.fcsv",
            **config["subj_wildcards"],
        ),
    params:
        template = workflow.source_path('../resources/dummy.fcsv'),
    output:
        # Need to consider LPS
        fcsv_new=bids(
            root=join(config['output_dir'], 'tform_script'),
            suffix="afids.fcsv",
            space=config["space"],
            **config["subj_wildcards"],
        ),
    script:
        './scripts/tform_script.py'


rule rewrite_fcsv:
    input:
        fcsv_new=rules.fid_tform_mni_rigid.output.fcsv_new,
    output:
        landmarks=bids(
            root=join(config["output_dir"], "fcsv_to_landmarks"),
            space=config["space"],
            suffix="landmarks.txt",
            **config["subj_wildcards"],
        ),
    script:
        "./scripts/fcsv_to_landmarks.py"


rule landmarks_to_spheres:
    input:
        afids_txt=rules.rewrite_fcsv.output.landmarks,
        warped=rules.align_template_rigid.output.warped,
    output:
        sphere=bids(
            root=join(config["output_dir"], "landmarks_to_spheres"),
            space=config["space"],
            suffix="landmarks.nii.gz",
            **config["subj_wildcards"]
        )
    params:
        sphere_size=config["c3d"]["landmarks"]["sphere_size"],
    container: config["singularity"]["neuroglia"]
    shell:
        "c3d {input.warped} -scale 0 -landmarks-to-spheres {input.afids_txt} {params.sphere_size} -o {output.sphere}"


rule train_c3d:
    input:
        images_warped=expand(
            rules.align_template_rigid.output.warped,
            zip,
            **config["input_zip_lists"]["t1w"],
        ),
        images_grad=expand(
            rules.gen_grad_template.output.grad,
            zip,
            **config["input_zip_lists"]["t1w"],
        ),
        spheres=expand(
            rules.landmarks_to_spheres.output.sphere,
            zip,
            **config["input_zip_lists"]["t1w"],
        ),
    params:
        patch=config["c3d"]["model_params"]["patch"],
        treedepth=config["c3d"]["model_params"]["treedepth"],
        ntrees=config["c3d"]["model_params"]["ntrees"],
    output:
        model=bids(
            root=join(config["output_dir"], "auto-afids-train"),
            datatype="anat",
            suffix="model.rf",
            space=config["space"],
        ),
    container: config["singularity"]["neuroglia"]
    shell:
        'c4d -verbose {input.images_warped} -foreach -popas ALLMRI -endfor {input.images_grad} -foreach -popas ALLGRAD -endfor {input.spheres} -foreach -popas ALLSEG -endfor -rf-param-patch {params.patch} -rf-param-ntrees {params.ntrees} -push ALLMRI -push ALLGRAD -push ALLSEG -rf-train {output.model}'
