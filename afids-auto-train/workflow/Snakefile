#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids

import os
from os.path import join
import pandas as pd

configfile: 'config/snakebids.yml'

#writes inputs_config.yml and updates config dict
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    derivatives=config["derivatives"],
    participant_label=config["participant_label"],
    exclude_participant_label=config["exclude_participant_label"],
    use_bids_inputs=True,
)

#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(\
    config["pybids_inputs"]\
)

#---- end snakebids boilerplate ------------------------------------------------

rule all:
    input:
        bids(
            root=join(config["output_dir"], "auto-afids-train"),
            suffix="model.rf",
            space=config["space"],
        )
        #bids(
        #    root=join(config["output_dir"], "reg_aladin"),
        #    session='train',
        #    from_='subject',
        #    to=config["space"],
        #    desc='rigid',
        #    suffix="regqc.html",
        #),

rule skull_strip: 
    input: 
    	brainskull = inputs["t1w"].input_path,
    output: 
        brain=expand(
                bids(
                root=join(config["output_dir"], "skull_stripped"),
                datatype="anat",
                res="native",
                suffix="T1w.nii.gz",
                desc="synthstrip"
                space=config["space"],
                **inputs["t1w"].input_wildcards,
            ),
        mask=expand(
                bids(
                root=join(config["output_dir"], "skull_stripped"),
                datatype="anat",
                res="native",
                suffix="mask.nii.gz",
                desc="synthstripbrain"
                space=config["space"],
                **inputs["t1w"].input_wildcards,
            ),
    container: config["singularity"]["synthstrip"]
    shell:
        "mri_synthstrip -i {input.brainskull} -o {output.brain} -m {output.mask}"
    
rule align_template_rigid:
    input:
        image=rules.skull_strip.output.brain,
    output:
        warped=bids(
            root=join(config["output_dir"], "reg_aladin"),
            datatype="anat",
            res="1mm",
            suffix="T1w.nii.gz",
            space=config["space"],
            **inputs["t1w"].input_wildcards,
        ),
        xfm_ras=bids(
            root=join(config["output_dir"], "reg_aladin"),
            datatype="anat",
            suffix="xfm.txt",
            space=config["space"],
            **inputs["t1w"].input_wildcards
        ),
    params:
        fixed = join(workflow.basedir, config['template']),
    container: config["singularity"]["neuroglia"]
    shell:
        "reg_aladin -flo {input.image} -ref {params.fixed} -res {output.warped} -rigOnly -interp 0 -aff {output.xfm_ras}"

rule normalize: 
    input:
        im=rules.align_template_rigid.output.warped,
    output:
        im_norm=bids(
            root=join(config["output_dir"], "normalized"),
            datatype="anat",
            res="1mm",
            suffix="T1w.nii.gz",
            desc="synthstripnorm"
            space=config["space"],
            **inputs["t1w"].input_wildcards,
        ),
    script:
        "./scripts/normalization_script.py"



rule gen_grad_template:
    input:
        image=rules.normalize.outputs.im_norm,
    output:Z
        gradx=expand(
                bids(
                root=join(config["output_dir"], "c3d_grad"),
                datatype="anat",
                res="1mm",
                desc="grad{grad_dir}",
                suffix="T1w.nii.gz",
                space=config["space"],
                **inputs["t1w"].input_wildcards,
            ),
            grad_dir=['x'],
            allow_missing=True,
        ),
        grady=expand(
                bids(
                root=join(config["output_dir"], "c3d_grad"),
                datatype="anat",
                res="1mm",
                desc="grad{grad_dir}",
                suffix="T1w.nii.gz",
                space=config["space"],
                **inputs["t1w"].input_wildcards,
            ),
            grad_dir=['y'],
            allow_missing=True,
        ),
        gradz=expand(
                bids(
                root=join(config["output_dir"], "c3d_grad"),
                datatype="anat",
                res="1mm",
                desc="grad{grad_dir}",
                suffix="T1w.nii.gz",
                space=config["space"],
                **inputs["t1w"].input_wildcards,
            ),
            grad_dir=['z'],
            allow_missing=True,
        ),
    container: config["singularity"]["neuroglia"]
    shell:
        "c3d -verbose {input.image} -smooth 1x1x1vox -grad -oo {output.gradx} {output.grady} {output.gradz}"

rule fid_tform_mni_rigid:
    input:
        xfm_new=rules.align_template_rigid.output.xfm_ras,
        groundtruth=bids(
            root=join(config["bids_dir"], 'derivatives', 'afids_groundtruth'),
            space="T1w",
            desc="groundtruth",
            suffix="afids.fcsv",
            **inputs.subj_wildcards,
        ),
    params:
        template = workflow.source_path('../resources/dummy.fcsv'),
    output:
        fcsv_new=bids(
            root=join(config['output_dir'], 'tform_script'),
            suffix="afids.fcsv",
            space=config["space"],
            **inputs["t1w"].input_wildcards,
        ),
    script:
        './scripts/tform_script.py'


rule rewrite_fcsv:
    input:
        fcsv_new=rules.fid_tform_mni_rigid.output.fcsv_new,
    output:
        landmarks=bids(
            root=join(config["output_dir"], "fcsv_to_landmarks"),
            space=config["space"],
            suffix="landmarks.txt",
            **inputs["t1w"].input_wildcards,
        ),
    script:
        "./scripts/fcsv_to_landmarks.py"


rule landmarks_to_spheres:
    input:
        afids_txt=rules.rewrite_fcsv.output.landmarks,
        warped=rules.align_template_rigid.output.warped,
    output:
        sphere=bids(
            root=join(config["output_dir"], "landmarks_to_spheres"),
            space=config["space"],
            suffix="landmarks.nii.gz",
            **inputs["t1w"].input_wildcards
        )
    params:
        sphere_size=config["c3d"]["landmarks"]["sphere_size"],
    container: config["singularity"]["neuroglia"]
    shell:
        "c3d {input.warped} -scale 0 -landmarks-to-spheres {input.afids_txt} {params.sphere_size} -o {output.sphere}"


#rule reg_qc:
#    input:
#        images=expand(
#            rules.align_template_rigid.output.warped,
#            zip,
#            **config["input_zip_lists"]["t1w"],
#        ),
#    output:
#        html_fig=bids(
#            root=join(config["output_dir"], "reg_aladin"),
#            session='train',
#            from_='subject',
#            to=config["space"],
#            desc='rigid',
#            suffix="regqc.html",
#        ),
#    script:
#        './scripts/reg_qc.py'


rule train_c3d:
    input:
        images_warped=expand(
            rules.align_template_rigid.output.warped,
            zip,
            **inputs["t1w"].input_zip_lists,
        ),
        images_gradx=expand(
            rules.gen_grad_template.output.gradx,
            zip,
            **inputs["t1w"].input_zip_lists,
        ),
        images_grady=expand(
            rules.gen_grad_template.output.grady,
            zip,
            **inputs["t1w"].input_zip_lists,
        ),
        images_gradz=expand(
            rules.gen_grad_template.output.gradz,
            zip,
            **inputs["t1w"].input_zip_lists,
        ),
        spheres=expand(
            rules.landmarks_to_spheres.output.sphere,
            zip,
            **inputs["t1w"].input_zip_lists,
        ),
    params:
        patch=config["c3d"]["model_params"]["patch"],
        treedepth=config["c3d"]["model_params"]["treedepth"],
        ntrees=config["c3d"]["model_params"]["ntrees"],
        usexyz="-rf-param-usexyz" if config["c3d"]["model_params"]["usexyz"] else ""
    output:
        model=bids(
            root=join(config["output_dir"], "auto-afids-train"),
            suffix="model.rf",
            space=config["space"],
        ),
    container: config["singularity"]["neuroglia"]
    shell:
        'c4d -verbose {input.images_warped} -tile w -popas ALLMRI \
        {input.images_gradx} -tile w -popas ALLGRADX \
        {input.images_grady} -tile w -popas ALLGRADY \
        {input.images_gradz} -tile w -popas ALLGRADZ \
        {input.spheres} -tile w -popas ALLSEG \
        -rf-param-patch {params.patch} -rf-param-ntrees {params.ntrees} {params.usexyz} \
        -rf-param-treedepth {params.treedepth} \
        -push ALLMRI -push ALLGRADX -push ALLGRADY -push ALLGRADZ -push ALLSEG -rf-train {output.model}'
